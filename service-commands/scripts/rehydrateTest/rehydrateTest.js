const axios = require('axios')
const fs = require('fs')
const _ = require('lodash')

const cn2Url = 'https://creatornode2.staging.audius.co'
const cn3Url = 'https://creatornode3.staging.audius.co'

/**
 * data generated by query:
 * select distinct "blockchainId" from "Tracks" order by "blockchainId" asc;
 */

const timeout = async function (ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

const hitCNRoute = async function (cnUrl, trackID) {
  await axios.get(`${cnUrl}/tracks/download_status/${trackID}`)
}

testCN2 = async function () {
  let cn2TrackIDs = fs.readFileSync('./cn2.staging.trackIDs.txt').toString().split("\n")
  cn2TrackIDs = _.shuffle(cn2TrackIDs)

  for await (const trackID of cn2TrackIDs) {
    console.log(`{${new Date()}} || Calling ${cn2Url}/tracks/download_status/${trackID} ...`)
    await hitCNRoute(cn2Url, trackID)
    console.log(`{${new Date()}} || 100ms delay`)
    await timeout(100)
  }
}

testCN3 = async function () {
  let cn3TrackIDs = fs.readFileSync('./cn3.staging.trackIDs.txt').toString().split("\n")
  cn3TrackIDs = _.shuffle(cn3TrackIDs)

  for await (const trackID of cn3TrackIDs) {
    console.log(`{${new Date()}} || Calling ${cn3Url}/tracks/download_status/${trackID} ...`)
    await hitCNRoute(cn3Url, trackID)
    console.log(`{${new Date()}} || 100ms delay`)
    await timeout(100)
  }
}

const run = async function () {
  let count = 0
  while (++count < 100) {
    // await Promise.all([testCN2(), testCN3()])
    await testCN2()
    console.log(`\n\n\nCOMPLETED RUN #${count}\n\n\n`)
  }
}

run()